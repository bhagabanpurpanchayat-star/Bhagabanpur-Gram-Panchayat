<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Polling Station Entry Module</title>
  <style>
    body {
      font-family: "Segoe UI", Roboto, Arial, sans-serif;
      background: linear-gradient(135deg, #e0eafc, #cfdef3);
      padding: 40px;
      display: flex;
      justify-content: center;
    }
    .glass-container {
      width: 100%;
      max-width: 1600px;
      background: rgba(255, 255, 255, 0.2);
      border-radius: 20px;
      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
      backdrop-filter: blur(12px);
      -webkit-backdrop-filter: blur(12px);
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 30px;
    }
    h2 {
      text-align: center;
      margin-bottom: 20px;
      color: #222;
      font-size: 26px;
      font-weight: 600;
    }
    .toolbar {
      display: flex;
      justify-content: flex-end;
      align-items: flex-start;
      margin-bottom: 10px;
      gap: 10px;
    }
    .stamp {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      background: rgba(255,255,255,0.5);
      border: 1px solid rgba(0,0,0,0.1);
      border-radius: 10px;
      padding: 6px 12px;
      font-size: 14px;
      font-weight: 600;
      color: #222;
    }
    .stamp span { margin: 2px 0; }
    .refresh-btn {
      background: rgba(255, 255, 255, 0.3);
      border: 1px solid rgba(0,0,0,0.15);
      border-radius: 10px;
      padding: 6px 12px;
      font-size: 16px;
      cursor: pointer;
      box-shadow: 0 2px 6px rgba(0,0,0,0.15);
      transition: all 0.2s ease-in-out;
    }
    .refresh-btn:hover { background: rgba(0,123,255,0.2); }
    .progress-wrapper {
      flex-grow: 1;
      display: none;
      align-items: center;
      gap: 8px;
    }
    .progress-bar {
      flex-grow: 1;
      height: 14px;
      background: rgba(255,255,255,0.5);
      border-radius: 7px;
      overflow: hidden;
      position: relative;
    }
    .progress-bar-fill {
      width: 0%;
      height: 100%;
      background: linear-gradient(
        90deg,
        #ff9800 0%,
        #ffeb3b 30%,
        #ffffff 50%,
        #ffeb3b 70%,
        #ff9800 100%
      );
      background-size: 200% 100%;
      animation: spark 0.5s linear infinite;
    }
    @keyframes spark {
      from { background-position: 200% 0; }
      to   { background-position: 0 0; }
    }
    .progress-text {
      min-width: 50px;
      font-size: 14px;
      color: #333;
      font-weight: 600;
    }
    .table-container {
      max-height: 500px;
      overflow-y: auto;
      border-radius: 12px;
    }
    table {
      border-collapse: collapse;
      width: 100%;
      min-width: 1250px;
    }
    th, td {
      border: 1px solid rgba(0, 0, 0, 0.1);
      padding: 14px 10px;
      text-align: center;
      vertical-align: middle;
      color: #333;
      font-size: 14px;
    }
    thead th {
      background: #2c3e50;
      color: #fff;
      position: sticky;
      top: 0;
      z-index: 5;
    }
    tr:hover td { background: rgba(255, 255, 255, 0.7); }
    input, textarea {
      width: 95%;
      box-sizing: border-box;
      padding: 8px;
      font-size: 14px;
      border: 1px solid rgba(0,0,0,0.2);
      border-radius: 8px;
      text-align: center;
      background: rgba(255, 255, 255, 0.8);
    }
    textarea { resize: none; height: 36px; }
    .actions { min-width: 150px; white-space: nowrap; }
    .actions button,
    .add-row {
      background: rgba(255, 255, 255, 0.3);
      border: 1px solid rgba(0,0,0,0.15);
      border-radius: 10px;
      padding: 6px 12px;
      font-size: 14px;
      cursor: pointer;
      margin: 0 2px;
      transition: all 0.2s ease;
    }
    .actions button:disabled { opacity: 0.6; cursor: not-allowed; }
    .save-btn { color: #007BFF; }
    .edit-btn { color: #FF9800; }
    .delete-btn { color: #E91E63; }
    .add-row { margin-top: 15px; color: #28a745; }
  </style>
</head>
<body>

<div class="glass-container">
  <h2>Polling Station Data Entry Module</h2>

  <div class="toolbar">
    <div class="stamp">
      <span>üöπ Male Voter: <b id="maleSum">0</b></span>
      <span>üë© Female Voter: <b id="femaleSum">0</b></span>
      <span>‚öß Other Voter: <b id="otherSum">0</b></span>
      <span>üó≥Ô∏è Total Voter: <b id="totalSum">0</b></span>
    </div>
    <div class="progress-wrapper">
      <div class="progress-bar"><div class="progress-bar-fill"></div></div>
      <div class="progress-text">0%</div>
    </div>
    <button type="button" class="refresh-btn" onclick="refreshData()">üîÑ Refresh</button>
  </div>

  <form id="pollingForm">
    <div class="table-container">
      <table id="pollingTable">
        <thead>
          <tr>
            <th>Sl No</th>
            <th>Name Of the Polling Station</th>
            <th>Assigned BLO</th>
            <th>Contact No</th>
            <th>Area Assigned</th>
            <th>Male Voter</th>
            <th>Female Voter</th>
            <th>Third Gender Voter</th>
            <th>Total Voter</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
    <button type="button" class="add-row" onclick="addRow()">+ Add Row</button>
  </form>
</div>

<script>
  const endpoint = "https://script.google.com/macros/s/AKfycbyAqa_V0CSa5XCo4ksJjvhMBOEhJFTjJP8wyGXPuG3SiuADULa0Np6_rY_gLVqcWd-fSw/exec";
  let progressInterval;

  function startProgress() {
    const wrapper = document.querySelector(".progress-wrapper");
    const fill = document.querySelector(".progress-bar-fill");
    const text = document.querySelector(".progress-text");
    let percent = 0;
    wrapper.style.display = "flex";
    fill.style.width = "0%";
    text.textContent = "0%";

    progressInterval = setInterval(() => {
      percent += 2;
      if (percent > 100) percent = 100;
      fill.style.width = percent + "%";
      text.textContent = percent + "%";
      if (percent === 100) clearInterval(progressInterval);
    }, 80);
  }

  function endProgress() {
    const wrapper = document.querySelector(".progress-wrapper");
    const fill = document.querySelector(".progress-bar-fill");
    const text = document.querySelector(".progress-text");
    clearInterval(progressInterval);
    fill.style.width = "100%";
    text.textContent = "100%";
    setTimeout(() => { wrapper.style.display = "none"; }, 600);
  }

  async function refreshData() {
    startProgress();
    await loadData();
    updateSums();
    endProgress();
  }

  async function loadData() {
    const tbody = document.querySelector("#pollingTable tbody");
    tbody.innerHTML = "";
    const res = await fetch(endpoint);
    const records = await res.json();

    if (!records.length) { addRow(); return; }

    records.forEach((data, i) => {
      const tr = document.createElement("tr");
      tr.setAttribute("data-rowindex", data.rowIndex);
      const hasStation = data["Name Of the Polling Station"] && data["Name Of the Polling Station"].trim() !== "";

      tr.innerHTML = `
        <td><input type="text" name="slno[]" value="${i+1}" readonly></td>
        <td><input type="text" name="station[]" value="${data["Name Of the Polling Station"]||""}"></td>
        <td><input type="text" name="blo[]" value="${data["Assigned BLO"]||""}"></td>
        <td><input type="text" name="contact[]" value="${data["Contact No"]||""}"></td>
        <td><textarea name="area[]">${data["Area Assigned"]||""}</textarea></td>
        <td><input type="number" name="male[]" value="${data["Male Voter"]||""}" oninput="autoCalc(this)"></td>
        <td><input type="number" name="female[]" value="${data["Female Voter"]||""}" oninput="autoCalc(this)"></td>
        <td><input type="number" name="third[]" value="${data["Third Gender Voter"]||""}" oninput="autoCalc(this)"></td>
        <td><input type="number" name="total[]" value="${data["Total Voter"]||""}" readonly></td>
        <td class="actions">
          <button type="button" class="save-btn" ${hasStation ? "disabled" : ""} onclick="handleSaveClick(this, ${hasStation})">üíæ Save</button>
          <button type="button" class="edit-btn" onclick="updateRow(this)">‚úèÔ∏è Update</button>
          <button type="button" class="delete-btn" onclick="deleteRow(this)">üóëÔ∏è Delete</button>
        </td>`;
      tbody.appendChild(tr);
      autoCalc(tr.querySelector('input[name="male[]"]'));
    });
  }

  function addRow() {
    const tbody = document.querySelector("#pollingTable tbody");
    const rowCount = tbody.rows.length + 1;
    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td><input type="text" name="slno[]" value="${rowCount}" readonly></td>
      <td><input type="text" name="station[]"></td>
      <td><input type="text" name="blo[]"></td>
      <td><input type="text" name="contact[]"></td>
      <td><textarea name="area[]"></textarea></td>
      <td><input type="number" name="male[]" oninput="autoCalc(this)"></td>
      <td><input type="number" name="female[]" oninput="autoCalc(this)"></td>
      <td><input type="number" name="third[]" oninput="autoCalc(this)"></td>
      <td><input type="number" name="total[]" readonly></td>
      <td class="actions">
        <button type="button" class="save-btn" onclick="handleSaveClick(this, false)">üíæ Save</button>
        <button type="button" class="edit-btn" onclick="updateRow(this)">‚úèÔ∏è Update</button>
        <button type="button" class="delete-btn" onclick="deleteRow(this)">üóëÔ∏è Delete</button>
      </td>`;
    tbody.appendChild(tr);
  }

  function autoCalc(el) {
    const row = el.closest("tr");
    const male = parseInt(row.querySelector('input[name="male[]"]').value) || 0;
    const female = parseInt(row.querySelector('input[name="female[]"]').value) || 0;
    const third = parseInt(row.querySelector('input[name="third[]"]').value) || 0;
    row.querySelector('input[name="total[]"]').value = male + female + third;
    updateSums();
  }

  function updateSums() {
    let maleSum = 0, femaleSum = 0, otherSum = 0, totalSum = 0;
    document.querySelectorAll('input[name="male[]"]').forEach(el => maleSum += parseInt(el.value) || 0);
    document.querySelectorAll('input[name="female[]"]').forEach(el => femaleSum += parseInt(el.value) || 0);
    document.querySelectorAll('input[name="third[]"]').forEach(el => otherSum += parseInt(el.value) || 0);
    document.querySelectorAll('input[name="total[]"]').forEach(el => totalSum += parseInt(el.value) || 0);

    document.getElementById("maleSum").textContent = maleSum;
    document.getElementById("femaleSum").textContent = femaleSum;
    document.getElementById("otherSum").textContent = otherSum;
    document.getElementById("totalSum").textContent = totalSum;
  }

  function handleSaveClick(btn, isExisting) {
    if (isExisting) {
      alert("You can Edit/Delete this record.");
    } else {
      saveRow(btn);
    }
  }

  async function saveRow(btn) {
    btn.disabled = true; btn.textContent = "üíæ Saving...";
    const row = btn.closest("tr");
    const inputs = row.querySelectorAll("input, textarea");
    const formData = new FormData();
    formData.append("action", "save");
    inputs.forEach(el => formData.append(el.name.replace("[]",""), el.value));
    const res = await fetch(endpoint, { method: "POST", body: formData });
    btn.textContent = "üíæ Save"; btn.disabled = false;
    console.log(await res.text());
    updateSums();
  }

  async function updateRow(btn) {
    btn.disabled = true; btn.textContent = "‚úèÔ∏è Updating...";
    const row = btn.closest("tr");
    const rowIndex = row.getAttribute("data-rowindex");
    const inputs = row.querySelectorAll("input, textarea");
    const formData = new FormData();
    formData.append("action", "update");
    formData.append("rowIndex", rowIndex);
    inputs.forEach(el => formData.append(el.name.replace("[]",""), el.value));
    const res = await fetch(endpoint, { method: "POST", body: formData });
    btn.textContent = "‚úèÔ∏è Update"; btn.disabled = false;
    console.log(await res.text());
    updateSums();
  }

  async function deleteRow(btn) {
    if (!confirm("Delete this row?")) return;
    btn.disabled = true; btn.textContent = "üóëÔ∏è Deleting...";
    const row = btn.closest("tr");
    const rowIndex = row.getAttribute("data-rowindex");
    const formData = new FormData();
    formData.append("action", "delete");
    formData.append("rowIndex", rowIndex);
    const res = await fetch(endpoint, { method: "POST", body: formData });
    btn.textContent = "üóëÔ∏è Delete"; btn.disabled = false;
    console.log(await res.text());
    row.remove();
    updateSums();
  }

  window.addEventListener("load", () => refreshData());
</script>
</body>
</html>
