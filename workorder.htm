<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Work Order Module</title>
  <style>
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
      background: #2b2b2b;
      color: #eee;
      font-size: 12px;
    }

    body { display: flex; flex-direction: column; }
    h2 { color: #fff; font-size: 16px; margin: 10px; text-align: center; }

    .toolbar { display: flex; justify-content: space-between; align-items: center; padding: 8px; }
    .toolbar input { padding: 3px; border-radius: 4px; border: 1px solid #555; width: 200px; font-size: 12px; }
    .toolbar button { padding: 5px 10px; background: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px; }
    .toolbar button:hover { background: #218838; }

    .spinner { width: 14px; height: 14px; border: 2px solid #fff; border-top: 2px solid transparent; border-radius: 50%; display: inline-block; animation: spin 0.8s linear infinite; }
    @keyframes spin { from { transform: rotate(0deg);} to { transform: rotate(360deg);} }

    #message { margin: 0 10px 6px; padding: 6px; display: none; border-radius: 4px; font-weight: bold; text-align: center; font-size: 12px; }
    #message.success { background: #28a745; color: white; }
    #message.error { background: #dc3545; color: white; }
    #message.loading { background: #007bff; color: white; }

    .table-container { flex: 1; overflow-y: auto; border: 1px solid #555; margin: 0 10px 10px; }
    table { border-collapse: collapse; font-size: 12px; width: 100%; table-layout: auto; }
    th, td { border: 1px solid #555; padding: 4px 6px; text-align: center; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    thead th { position: sticky; top: 0; background: #003366; color: #fff; z-index: 2; }

    /* Column width classes */
    .col-timestamp { width: 120px; }
    .col-unique { width: 100px; }
    .col-nit { width: 80px; }
    .col-sl { width: 40px; }
    .col-nitdate { width: 90px; }
    .col-vendor { width: 120px; }
    .col-work { width: 150px; text-align: left; white-space: normal; }
    .col-source { width: 120px; }
    .col-wo-no { width: 80px; }
    .col-wo-date { width: 90px; }
    .col-estimate { width: 80px; }
    .col-action { width: 70px; }

    tbody tr { transition: background-color 0.2s, transform 0.2s; }
    tbody tr:hover { background-color: #444; transform: scale(1.01); }

    button.action-btn { padding: 3px 6px; border: none; border-radius: 4px; cursor: pointer; font-size: 12px; transition: background 0.3s ease; }

    td input { width: 100%; box-sizing: border-box; font-size: 12px; padding: 2px; text-align: center; }
    td input[type="date"] { padding: 2px; }
  </style>
</head>
<body>
  <h2>Work Order Module</h2>
  <div id="message"></div>

  <div class="toolbar">
    <input type="text" id="searchInput" placeholder="üîç Search..." oninput="filterTable()" />
    <button id="refreshBtn" onclick="refreshData()">‚ü≥ Refresh</button>
  </div>

  <div class="table-container">
    <table id="dataTable">
      <thead>
        <tr>
          <th class="col-timestamp">Timestamp</th>
          <th class="col-unique">UNIQUE NIT</th>
          <th class="col-nit">NIT</th>
          <th class="col-sl">SL</th>
          <th class="col-nitdate">NIT DATE</th>
          <th class="col-vendor">VENDOR</th>
          <th class="col-work">Name of the work</th>
          <th class="col-source">Source of Fund</th>
          <th class="col-wo-no">WORK ORDER NO</th>
          <th class="col-wo-date">WORK ORDER DATE</th>
          <th class="col-estimate">ESTIMATE VALUE</th>
          <th class="col-action">Action</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>

  <script>
    const scriptURL = "https://script.google.com/macros/s/AKfycbzLK7FVW2FBBoQA6F5GMtSv5cn0BwElF8ZYrJkCDDD97y-ndnGtNEK8UnCF8uYh5J1vjQ/exec";
    let tableData = [];
    const widthClasses = ["col-timestamp","col-unique","col-nit","col-sl","col-nitdate","col-vendor","col-work","col-source","col-wo-no","col-wo-date","col-estimate"];
    const paddingClasses = ["","","","","","","","","","",""];

    async function refreshData() {
      const btn = document.getElementById("refreshBtn");
      const oldText = btn.innerHTML;
      btn.innerHTML = `<span class="spinner"></span> Refreshing...`;
      btn.disabled = true;
      showMessage("Refreshing data...", "loading");
      await loadData();
      btn.innerHTML = oldText;
      btn.disabled = false;
      showMessage("Data loaded successfully ‚úÖ", "success");
    }

    async function loadData() {
      const res = await fetch(scriptURL + "?action=getBillPaymentData");
      tableData = await res.json();
      renderTable(tableData);
    }

    function renderTable(data) {
      const tbody = document.querySelector("#dataTable tbody");
      tbody.innerHTML = "";

      data.forEach((row, i) => {
        let tr = document.createElement("tr");

        for(let j=0;j<=10;j++){
          let td = document.createElement("td");
          td.className = `${widthClasses[j]} ${paddingClasses[j]}`;

          if(j===8){ 
            td.innerHTML = `<input type="text" value="${row[j]||''}" id="col_${i}_${j}" oninput="toggleButton(${i})">`;
          }
          else if(j===9){
            let dateVal = "";
            if(row[j]){
              const d = new Date(row[j]);
              if(!isNaN(d)) dateVal = d.toISOString().split("T")[0];
            }
            td.innerHTML = `<input type="date" value="${dateVal}" id="col_${i}_${j}" oninput="toggleButton(${i})">`;
          }
          else if(j===10){
            td.innerHTML = `<input type="text" value="${row[j]||''}" id="col_${i}_${j}" oninput="toggleButton(${i})">`;
          }
          else td.textContent = row[j] ?? "";

          tr.appendChild(td);
        }

        let tdAction = document.createElement("td");
        tdAction.className = "col-action";
        tdAction.innerHTML = `<button class="action-btn" id="btn_${i}" onclick="updateRow(${i})">SAVE</button>`;
        tr.appendChild(tdAction);

        tbody.appendChild(tr);
        toggleButton(i);
      });
    }

    function filterTable() {
      const search = document.getElementById("searchInput").value.toLowerCase();
      const filtered = tableData.filter(row =>
        (row[1] && row[1].toString().toLowerCase().includes(search)) ||
        (row[2] && row[2].toString().toLowerCase().includes(search)) ||
        (row[3] && row[3].toString().toLowerCase().includes(search)) ||
        (row[4] && row[4].toString().toLowerCase().includes(search)) ||
        (row[5] && row[5].toString().toLowerCase().includes(search)) ||
        (row[6] && row[6].toString().toLowerCase().includes(search))
      );
      renderTable(filtered);
    }

    function toggleButton(i) {
      const btn = document.getElementById(`btn_${i}`);
      btn.textContent = "UPDATE";
      btn.style.background = "blue";
      btn.style.color = "white";
    }

    function showMessage(text,type){
      const msg=document.getElementById("message");
      msg.textContent=text; msg.className=type; msg.style.display="block";
      setTimeout(()=>{msg.style.display="none";},2500);
    }

    async function updateRow(i){
      const btn=document.getElementById(`btn_${i}`);
      btn.disabled=true; btn.textContent="Saving...";

      try{
        const formData=new FormData();
        formData.append("action","updateBillPayment");
        formData.append("rowIndex",i);

        for(let j of [8,9,10]){
          const inputEl=document.getElementById(`col_${i}_${j}`);
          if(inputEl) formData.append(`col${j}`,inputEl.value);
        }

        const res = await fetch(scriptURL,{method:"POST",body:formData});
        const result = await res.json();

        if(result.success){
          btn.textContent="Saved ‚úî"; btn.style.background="green";
          showMessage(`Row ${result.row} updated successfully ‚úÖ`,"success");
          const rowEl = document.querySelector(`#btn_${i}`).closest("tr");
          rowEl.style.backgroundColor="#d4edda";
          setTimeout(()=>{rowEl.style.backgroundColor=""; toggleButton(i);},1500);
        } else {
          btn.textContent="Failed ‚úñ"; btn.style.background="red";
          showMessage("Update failed: "+(result.error||"Unknown"),"error");
        }
      } catch(err){
        btn.textContent="Error ‚úñ"; btn.style.background="red";
        showMessage("Network error: "+err.message,"error");
      } finally{
        setTimeout(()=>{btn.disabled=false; toggleButton(i);},2000);
      }
    }

    loadData();
  </script>
</body>
</html>
