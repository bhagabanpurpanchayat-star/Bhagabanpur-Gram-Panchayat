<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Earnest Money Register</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #2b2b2b;
      color: #eee;
      margin: 0;
      padding: 20px;
    }
    h2 { color: #fff; display: inline-block; }
    .summary {
      float: right;
      display: flex;
      gap: 10px;
      align-items: center;
    }
    .badge {
      padding: 6px 14px;
      border-radius: 50px;
      font-weight: bold;
      color: white;
      font-size: 13px;
      box-shadow: 0 0 5px rgba(0,0,0,0.3);
    }
    .badge.green { background-color: #28a745; }
    .badge.red { background-color: #dc3545; }
    .toolbar {
      margin-bottom: 15px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      clear: both;
    }
    .toolbar input {
      padding: 6px;
      border-radius: 4px;
      border: 1px solid #555;
      width: 300px;
      font-size: 13px;
    }
    .toolbar button {
      padding: 6px 12px;
      background: #28a745;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 5px;
      transition: background 0.3s ease;
      font-size: 13px;
    }
    .toolbar button:hover { background: #218838; }
    .spinner {
      width: 14px;
      height: 14px;
      border: 2px solid #fff;
      border-top: 2px solid transparent;
      border-radius: 50%;
      display: inline-block;
      animation: spin 0.8s linear infinite;
    }
    @keyframes spin { from { transform: rotate(0deg); } to { transform: rotate(360deg); } }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 15px;
      font-size: 13px;
    }
    th, td {
      border: 1px solid #555;
      padding: 6px;
      text-align: center;
    }
    thead {
      background: #003366;
      color: #fff;
      position: sticky;
      top: 0;
      z-index: 2;
    }
    button.action-btn {
      padding: 6px 12px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 12px;
      background-color: #28a745;
      color: white;
    }
    #message {
      margin-bottom: 10px;
      padding: 10px;
      display: none;
      border-radius: 5px;
      font-weight: bold;
      text-align: center;
      font-size: 13px;
    }
    #message.success { background: #28a745; color: white; }
    #message.error { background: #dc3545; color: white; }
    #message.loading { background: #007bff; color: white; }

    .modal {
      display: none;
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background: rgba(0,0,0,0.6);
      justify-content: center;
      align-items: center;
      z-index: 1000;
      padding: 20px;
    }
    .modal-content {
      background: #f0f0f0;
      color: #000;
      padding: 20px;
      border-radius: 10px;
      width: auto;
      max-width: 95%;
      max-height: 80%;
      overflow-y: auto;
      box-shadow: 0 4px 10px rgba(0,0,0,0.5);
      margin: auto;
    }
    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .modal-summary {
      display: flex;
      gap: 10px;
      align-items: center;
    }
    .modal-content h3 { margin: 0; color: #333; }
    .modal table {
      table-layout: auto;
      width: auto !important;
      margin: 10px auto 0 auto;
      border-collapse: collapse;
      font-size: 12px;
    }
    .modal th, .modal td {
      border: 1px solid #aaa;
      padding: 4px 6px;
      text-align: center;
      white-space: nowrap;
      width: auto !important;
    }
    .modal input, .modal select {
      font-size: 12px;
      padding: 4px;
      width: auto;
      max-width: 110px;
      box-sizing: border-box;
    }
    .modal .btn-bar {
      margin-top: 12px;
      text-align: right;
    }
    .modal .btn-bar button {
      padding: 6px 12px;
      border: none;
      border-radius: 4px;
      margin-left: 5px;
      cursor: pointer;
      font-size: 12px;
    }
    .close-btn { background: #dc3545; color: #fff; }
    .save-btn { background: #28a745; color: #fff; }

    @media (max-width: 520px) {
      .modal input, .modal select { max-width: 90px; font-size: 11px; }
      .toolbar input { width: 100%; }
    }
  </style>
</head>
<body>
  <h2>Acceptance & EMD Return</h2>
  <div class="summary">
    <span class="badge green" id="paidCount">PAID: ‚Çπ0</span>
    <span class="badge red" id="unpaidCount">UNPAID: ‚Çπ0</span>
  </div>

  <div id="message"></div>

  <div class="toolbar">
    <input type="text" id="searchInput" placeholder="üîç Search..." oninput="filterTable()">
    <button id="refreshBtn" onclick="refreshData()">‚ü≥ Refresh</button>
  </div>

  <table id="dataTable">
    <thead>
      <tr>
        <th>Timestamp</th>
        <th>UNIQUE NIT</th>
        <th>NIT</th>
        <th>SL</th>
        <th>NIT DATE</th>
        <th>VENDOR</th>
        <th>EARNEST MONEY</th>
        <th>Payment Status</th>
        <th>Tender Status</th>
        <th>Cheque No</th>
        <th>Date</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <div class="modal" id="vendorModal">
    <div class="modal-content">
      <div class="modal-header">
        <h3>Vendor: <span id="modalVendorName"></span></h3>
        <div class="modal-summary">
          <span class="badge green" id="modalPaid">PAID: ‚Çπ0</span>
          <span class="badge red" id="modalUnpaid">UNPAID: ‚Çπ0</span>
        </div>
      </div>

      <table id="modalTable">
        <thead>
          <tr>
            <th>NIT</th>
            <th>SL</th>
            <th>NIT DATE</th>
            <th>EARNEST MONEY</th>
            <th>Payment</th>
            <th>Tender Status</th>
            <th>Cheque No</th>
            <th>Date</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>

      <div class="btn-bar">
        <button class="close-btn" onclick="closeModal()">Close</button>
        <button class="save-btn" onclick="saveModalData()">Save All</button>
      </div>
    </div>
  </div>

  <script>
    const scriptURL = "https://script.google.com/macros/s/AKfycbxvnmaasTpH-xGlbaX6BIgSGZ7qlnTLD7uPp5my_xYfleZAAmf1eveP_vVW_N67K_VJrw/exec";
    let tableData = [];
    let currentVendor = null;

    function formatTimestamp(val){
      if(!val) return "";
      const d = new Date(val);
      if(isNaN(d)) return val;
      const pad = n => n.toString().padStart(2,'0');
      return `${d.getMonth()+1}/${d.getDate()}/${d.getFullYear()} ${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
    }

    function formatNitDate(val){
      if(!val) return "";
      const d = new Date(val);
      if(isNaN(d)) return val;
      return `${d.getMonth()+1}/${d.getDate()}/${d.getFullYear()}`;
    }

    async function refreshData(){
      const btn=document.getElementById("refreshBtn");
      btn.innerHTML=`<span class="spinner"></span> Refreshing...`;
      btn.disabled=true;
      showMessage("Refreshing data...","loading");
      await loadData();
      btn.innerHTML="‚ü≥ Refresh";
      btn.disabled=false;
      showMessage("Data loaded successfully ‚úÖ","success");
    }

    async function loadData(){
      try {
        const res = await fetch(scriptURL + "?action=getEarnestMoneyData");
        tableData = await res.json();
      } catch (err) {
        console.error("Load error:", err);
        tableData = [];
      }
      renderTable(tableData.map((row, idx) => ({ row, idx })));
    }

    function renderTable(items){
      const tbody=document.querySelector("#dataTable tbody");
      tbody.innerHTML="";
      items.forEach(item => {
        const row = item.row;
        const i = item.idx;
        let tr = document.createElement("tr");

        tr.innerHTML = `
          <td>${formatTimestamp(row[0])}</td>
          <td>${row[1]||""}</td>
          <td>${row[2]||""}</td>
          <td>${row[3]||""}</td>
          <td>${formatNitDate(row[4])}</td>
          <td><a href="#" onclick="openModal('${row[5]}');return false;" style="color:green;font-weight:bold">${row[5]||""}</a></td>
          <td>${row[6]}</td>
          <td><select id="payment_${i}" disabled>
            <option value="PAID" ${row[7]==="PAID"?"selected":""}>PAID</option>
            <option value="UNPAID" ${row[7]==="UNPAID"?"selected":""}>UNPAID</option>
          </select></td>
          <td><select id="status_${i}" onchange="toggleButton(${i})">
            <option value="" ${row[8]===""?"selected":""}></option>
            <option value="ACCEPTED" ${row[8]==="ACCEPTED"?"selected":""}>ACCEPTED</option>
            <option value="REJECTED" ${row[8]==="REJECTED"?"selected":""}>REJECTED</option>
          </select></td>
          <td><input type="text" id="cheque_${i}" value="${row[9]||''}" oninput="onChequeChange(${i})"></td>
          <td><input type="date" id="date_${i}" value="${row[10]||''}" oninput="toggleButton(${i})"></td>
          <td><button class="action-btn" id="btn_${i}" onclick="updateRow(${i})">Save</button></td>
        `;

        tbody.appendChild(tr);
        updateTenderColor(i);
        toggleButton(i);
      });
      updateSummary();
    }

    function onChequeChange(i){
      const cheque = document.getElementById(`cheque_${i}`).value.trim();
      const payment = document.getElementById(`payment_${i}`);
      payment.value = cheque ? "PAID" : "UNPAID";
      toggleButton(i);
      updateSummary();
    }

    function updateTenderColor(i){
      const status = document.getElementById(`status_${i}`);
      status.style.color = status.value === "ACCEPTED" ? "green" : status.value === "REJECTED" ? "red" : "black";
    }

    function toggleButton(i){
      const btn = document.getElementById(`btn_${i}`);
      btn.disabled = false;
    }

    function updateSummary(){
      let paid=0, unpaid=0;
      tableData.forEach((row,i)=>{
        const status = document.getElementById(`payment_${i}`)?.value;
        const amt = Number(row[6]) || 0;
        if(status==="PAID") paid+=amt;
        else unpaid+=amt;
      });
      document.getElementById("paidCount").textContent=`PAID: ‚Çπ${paid}`;
      document.getElementById("unpaidCount").textContent=`UNPAID: ‚Çπ${unpaid}`;
    }

    async function updateRow(i){
      const payload = {
        action:"updateEarnestMoney",
        rowIndex:i,
        paymentStatus:document.getElementById(`payment_${i}`).value,
        tenderStatus:document.getElementById(`status_${i}`).value,
        chequeNo:document.getElementById(`cheque_${i}`).value,
        dateVal:document.getElementById(`date_${i}`).value
      };
      showMessage(`Updating row ${i+1}...`,"loading");
      try {
        const res = await fetch(scriptURL, {
          method:"POST",
          body:JSON.stringify(payload)
        });
        const data = await res.json();
        if(data.success) showMessage(`Row ${i+1} updated ‚úÖ`,"success");
        else showMessage(`Error: ${data.error}`,"error");
      } catch (err) {
        showMessage("Update failed ‚ùå","error");
      }
    }

    function showMessage(msg,type){
      const m = document.getElementById("message");
      m.textContent = msg;
      m.className = type;
      m.style.display = "block";
      if(type !== "loading") setTimeout(()=>m.style.display="none",4000);
    }

    function filterTable(){
      const val = document.getElementById("searchInput").value.toLowerCase();
      const rows = document.querySelectorAll("#dataTable tbody tr");
      rows.forEach((tr,i)=>{
        const row = tableData[i];
        const text = [row[1], row[2], formatNitDate(row[4]), row[5]].join(" ").toLowerCase();
        tr.style.display = text.includes(val) ? "" : "none";
      });
    }

    function openModal(vendor){
      currentVendor = vendor;
      document.getElementById("modalVendorName").textContent = vendor;
      const tbody = document.querySelector("#modalTable tbody");
      tbody.innerHTML = "";
      let paid=0, unpaid=0;
      tableData.forEach((row,i)=>{
        if(row[5] !== vendor) return;
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td>${row[2]}</td>
          <td>${row[3]}</td>
          <td>${formatNitDate(row[4])}</td>
          <td>${row[6]}</td>
          <td><select id="mPayment_${i}" disabled>
            <option value="PAID" ${row[7]==="PAID"?"selected":""}>PAID</option>
            <option value="UNPAID" ${row[7]==="UNPAID"?"selected":""}>UNPAID</option>
          </select></td>
          <td><select id="mStatus_${i}">
            <option value="" ${row[8]===""?"selected":""}></option>
            <option value="ACCEPTED" ${row[8]==="ACCEPTED"?"selected":""}>ACCEPTED</option>
            <option value="REJECTED" ${row[8]==="REJECTED"?"selected":""}>REJECTED</option>
          </select></td>
          <td><input type="text" id="mCheque_${i}" value="${row[9]||''}" oninput="onModalChequeChange(${i})"></td>
          <td><input type="date" id="mDate_${i}" value="${row[10]||''}"></td>
        `;
        tbody.appendChild(tr);
        if(row[7]==="PAID") paid+=Number(row[6]||0);
        else unpaid+=Number(row[6]||0);
      });
      document.getElementById("modalPaid").textContent=`PAID: ‚Çπ${paid}`;
      document.getElementById("modalUnpaid").textContent=`UNPAID: ‚Çπ${unpaid}`;
      document.getElementById("vendorModal").style.display="flex";
    }

    function closeModal(){
      document.getElementById("vendorModal").style.display="none";
      currentVendor = null;
    }

    function onModalChequeChange(i){
      const val = document.getElementById(`mCheque_${i}`).value.trim();
      const pay = document.getElementById(`mPayment_${i}`);
      pay.value = val ? "PAID" : "UNPAID";
    }

    async function saveModalData(){
      if(!currentVendor) return;
      const payload = { action:"batchUpdateEarnestMoney", data:[] };
      tableData.forEach((row,i)=>{
        if(row[5] !== currentVendor) return;
        const item = {
          rowIndex: i,
          paymentStatus: document.getElementById(`mPayment_${i}`).value,
          tenderStatus: document.getElementById(`mStatus_${i}`).value,
          chequeNo: document.getElementById(`mCheque_${i}`).value,
          dateVal: document.getElementById(`mDate_${i}`).value
        };
        payload.data.push(item);
      });
      showMessage(`Saving ${payload.data.length} rows...`,"loading");
      try {
        const res = await fetch(scriptURL, {
          method:"POST",
          body:JSON.stringify(payload)
        });
        const data = await res.json();
        if(data.success){
          showMessage("Modal data saved ‚úÖ","success");
          refreshData();
          closeModal();
        } else showMessage(`Error: ${data.error}`,"error");
      } catch (err) {
        console.error(err);
        showMessage("Modal save failed ‚ùå","error");
      }
    }

    // Load on start
    refreshData();
  </script>
</body>
</html>

