<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Earnest Money Register</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #2b2b2b;
      color: #eee;
      margin: 0;
      padding: 20px;
    }
    h2 { color: #fff; display: inline-block; }
    .summary {
      float: right;
      display: flex;
      gap: 10px;
      align-items: center;
    }
    .badge {
      padding: 6px 14px;
      border-radius: 50px;
      font-weight: bold;
      color: white;
      font-size: 13px;
      box-shadow: 0 0 5px rgba(0,0,0,0.3);
    }
    .badge.green { background-color: #28a745; }
    .badge.red { background-color: #dc3545; }
    .toolbar {
      margin-bottom: 15px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      clear: both;
    }
    .toolbar input {
      padding: 6px;
      border-radius: 4px;
      border: 1px solid #555;
      width: 300px;
      font-size: 13px;
    }
    .toolbar button {
      padding: 6px 12px;
      background: #28a745;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 5px;
      transition: background 0.3s ease;
      font-size: 13px;
    }
    .toolbar button:hover { background: #218838; }
    .spinner {
      width: 14px;
      height: 14px;
      border: 2px solid #fff;
      border-top: 2px solid transparent;
      border-radius: 50%;
      display: inline-block;
      animation: spin 0.8s linear infinite;
    }
    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 15px;
      font-size: 13px;   /* 🔹 Reduced font size */
    }
    th, td {
      border: 1px solid #555;
      padding: 6px;      /* 🔹 Smaller padding */
      text-align: center;
    }
    thead {
      background: #003366;
      color: #fff;
      position: sticky;   /* 🔹 Sticky header */
      top: 0;
      z-index: 2;
    }
    button.action-btn {
      padding: 6px 12px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 12px;
    }
    #message {
      margin-bottom: 10px;
      padding: 10px;
      display: none;
      border-radius: 5px;
      font-weight: bold;
      text-align: center;
      font-size: 13px;
    }
    #message.success { background: #28a745; color: white; }
    #message.error { background: #dc3545; color: white; }
    #message.loading { background: #007bff; color: white; }
    .accepted { color: green; font-weight: bold; }
    .rejected { color: red; font-weight: bold; }
  </style>
</head>
<body>
  <h2>Acceptance & EMD Return</h2>
  <div class="summary">
    <span class="badge green" id="paidCount">PAID: ₹0</span>
    <span class="badge red" id="unpaidCount">UNPAID: ₹0</span>
  </div>

  <div id="message"></div>

  <div class="toolbar">
    <input type="text" id="searchInput" placeholder="🔍 Search by UNIQUE NIT, NIT, NIT DATE, or VENDOR..." oninput="filterTable()">
    <button id="refreshBtn" onclick="refreshData()">⟳ Refresh</button>
  </div>

  <table id="dataTable">
    <thead>
      <tr>
        <th>Timestamp</th>
        <th>UNIQUE NIT</th>
        <th>NIT</th>
        <th>SL</th>
        <th>NIT DATE</th>
        <th>VENDOR</th>
        <th>EARNEST MONEY</th>
        <th>Marking</th>
        <th>Payment Status</th>
        <th>Tender Status</th>
        <th>Cheque No</th>
        <th>Date</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <script>
    const scriptURL = "https://script.google.com/macros/s/AKfycbx4awV8-rBgjH3ZS0T_ps90f3gwfK1SB9kGpWJUH5KjYQkMt2ZRoYSwzjhFFpQSz7E5/exec";
    let tableData = [];

    async function refreshData() {
      const btn = document.getElementById("refreshBtn");
      const oldText = btn.innerHTML;
      btn.innerHTML = `<span class="spinner"></span> Refreshing...`;
      btn.disabled = true;
      showMessage("Refreshing data...", "loading");
      await loadData();
      btn.innerHTML = oldText;
      btn.disabled = false;
      showMessage("Data loaded successfully ✅", "success");
    }

    async function loadData() {
      const res = await fetch(scriptURL + "?action=getEarnestMoneyData");
      tableData = await res.json();
      renderTable(tableData);
      updateSummary();
    }

    function renderTable(data) {
      const tbody = document.querySelector("#dataTable tbody");
      tbody.innerHTML = "";

      data.forEach((row, i) => {
        let tr = document.createElement("tr");

        for (let j = 0; j < 8; j++) {
          let td = document.createElement("td");
          td.textContent = row[j] ?? "";
          tr.appendChild(td);
        }

        // Col 9 Payment Status
        let td9 = document.createElement("td");
        td9.innerHTML = `
          <select id="payment_${i}" onchange="updateSummary();toggleButton(${i})" style="width:90px;font-size:12px">
            <option value="PAID" ${row[8] === "PAID" ? "selected" : ""}>PAID</option>
            <option value="UNPAID" ${row[8] === "UNPAID" ? "selected" : ""}>UNPAID</option>
          </select>`;
        tr.appendChild(td9);

        // Col 10 Tender Status
        let td10 = document.createElement("td");
        td10.innerHTML = `
          <select id="status_${i}" onchange="updateTenderColor(${i});toggleButton(${i})" style="width:110px;font-size:12px">
            <option value="" ${row[9] === "" ? "selected" : ""}></option>
            <option value="ACCEPTED" ${row[9] === "ACCEPTED" ? "selected" : ""}>ACCEPTED</option>
            <option value="REJECTED" ${row[9] === "REJECTED" ? "selected" : ""}>REJECTED</option>
          </select>`;
        tr.appendChild(td10);

        // Col 11 Cheque No
        let td11 = document.createElement("td");
        td11.innerHTML = `<input type="text" value="${row[10] || ""}" id="cheque_${i}" oninput="updatePaymentStatus(${i});toggleButton(${i})" style="width:100px;font-size:12px">`;
        tr.appendChild(td11);

        // Col 12 Date
        let td12 = document.createElement("td");
        td12.innerHTML = `<input type="date" id="date_${i}" value="${formatDateForInput(row[11])}" oninput="toggleButton(${i})" style="font-size:12px">`;
        tr.appendChild(td12);

        // Action
        let tdAction = document.createElement("td");
        tdAction.innerHTML = `<button class="action-btn" id="btn_${i}" onclick="updateRow(${i})">...</button>`;
        tr.appendChild(tdAction);

        tbody.appendChild(tr);

        updateTenderColor(i);
        toggleButton(i);
      });
      updateSummary();
    }

    function formatDateForInput(dateVal) {
      if (!dateVal) return "";
      try {
        if (Object.prototype.toString.call(dateVal) === "[object Date]" && !isNaN(dateVal)) {
          return dateVal.toISOString().split("T")[0];
        }
        if (!isNaN(dateVal)) {
          let base = new Date(1899, 11, 30);
          base.setDate(base.getDate() + Number(dateVal));
          return base.toISOString().split("T")[0];
        }
        let str = dateVal.toString().replace(/\./g,"/").replace(/-/g,"/").trim();
        let parts = str.split("/");
        if (parts.length === 3) {
          if (parts[0].length === 4) return `${parts[0]}-${parts[1].padStart(2,"0")}-${parts[2].padStart(2,"0")}`;
          if (parts[2].length === 4) return `${parts[2]}-${parts[1].padStart(2,"0")}-${parts[0].padStart(2,"0")}`;
        }
        return "";
      } catch { return ""; }
    }

    function updateTenderColor(i) {
      const statusSelect = document.getElementById(`status_${i}`);
      if (!statusSelect) return;
      if (statusSelect.value === "ACCEPTED") {
        statusSelect.classList.add("accepted"); statusSelect.classList.remove("rejected");
      } else if (statusSelect.value === "REJECTED") {
        statusSelect.classList.add("rejected"); statusSelect.classList.remove("accepted");
      } else {
        statusSelect.classList.remove("accepted","rejected");
      }
    }

    function updatePaymentStatus(i) {
      const chequeVal = document.getElementById(`cheque_${i}`).value.trim();
      const paymentSelect = document.getElementById(`payment_${i}`);
      paymentSelect.value = chequeVal !== "" ? "PAID" : "UNPAID";
      updateSummary();
    }

    function updateSummary() {
      let paidSum = 0, unpaidSum = 0;
      tableData.forEach((row, i) => {
        const paymentStatus = document.getElementById(`payment_${i}`)?.value || row[8];
        const earnestMoney = parseFloat(row[6]) || 0;
        if (paymentStatus === "PAID") paidSum += earnestMoney;
        else unpaidSum += earnestMoney;
      });
      document.getElementById("paidCount").textContent = `PAID: ₹${paidSum.toLocaleString()}`;
      document.getElementById("unpaidCount").textContent = `UNPAID: ₹${unpaidSum.toLocaleString()}`;
    }

    function filterTable() {
      const search = document.getElementById("searchInput").value.toLowerCase();
      const filtered = tableData.filter(row =>
        (row[1] && row[1].toString().toLowerCase().includes(search)) ||
        (row[2] && row[2].toString().toLowerCase().includes(search)) ||
        (row[4] && row[4].toString().toLowerCase().includes(search)) ||
        (row[5] && row[5].toString().toLowerCase().includes(search))
      );
      renderTable(filtered);
    }

    function toggleButton(i) {
      const tenderStatus = document.getElementById(`status_${i}`)?.value.trim() || "";
      const chequeNo = document.getElementById(`cheque_${i}`)?.value.trim() || "";
      const dateVal = document.getElementById(`date_${i}`)?.value.trim() || "";
      const btn = document.getElementById(`btn_${i}`);
      if (!tenderStatus && !chequeNo && !dateVal) {
        btn.textContent = "SAVE"; btn.style.background = "green"; btn.style.color = "white";
      } else {
        btn.textContent = "UPDATE"; btn.style.background = "blue"; btn.style.color = "white";
      }
    }

    function showMessage(text, type) {
      const msg = document.getElementById("message");
      msg.textContent = text;
      msg.className = type;
      msg.style.display = "block";
      setTimeout(() => { msg.style.display = "none"; }, 2500);
    }

    async function updateRow(i) {
      const paymentStatus = document.getElementById(`payment_${i}`)?.value || "";
      const tenderStatus = document.getElementById(`status_${i}`)?.value || "";
      const chequeNo = document.getElementById(`cheque_${i}`)?.value || "";
      const dateVal = document.getElementById(`date_${i}`)?.value || "";
      const btn = document.getElementById(`btn_${i}`);

      btn.disabled = true; btn.textContent = "Saving...";

      try {
        const formData = new FormData();
        formData.append("action","updateEarnestMoney");
        formData.append("rowIndex", i);
        formData.append("paymentStatus", paymentStatus);
        formData.append("tenderStatus", tenderStatus);
        formData.append("chequeNo", chequeNo);
        formData.append("dateVal", dateVal);

        const res = await fetch(scriptURL,{method:"POST",body:formData});
        const result = await res.json();

        if (result.success) {
          btn.textContent = "Saved ✔"; btn.style.background = "green";
          showMessage(`Row ${result.row} updated successfully ✅`,"success");
          const row = document.querySelector(`#btn_${i}`).closest("tr");
          row.style.backgroundColor = "#d4edda";
          setTimeout(()=>{row.style.backgroundColor=""; toggleButton(i);},1500);
          updateSummary();
        } else {
          btn.textContent = "Failed ✖"; btn.style.background = "red";
          showMessage("Update failed: " + (result.error || "Unknown"), "error");
        }
      } catch (err) {
        btn.textContent = "Error ✖"; btn.style.background = "red";
        showMessage("Network error: " + err.message, "error");
      } finally {
        setTimeout(()=>{btn.disabled=false; toggleButton(i);},2000);
      }
    }

    loadData();
  </script>
</body>
</html>
